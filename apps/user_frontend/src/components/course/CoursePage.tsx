import { useGetCourseQuery } from "../../services/queries";
import { useParams } from "react-router-dom";
import CourseHeader from "./CourseHeader";
import { MdOutlineAddCircleOutline } from "react-icons/md";
import { axiosInstance } from "../../services/api";

// import { useNavigate } from "react-router-dom";
import Spinner from "../shimmer/Spinner";
import SectionDropDown from "./section/SectionDropDown";
import { createRazorPayOrder } from "../../services/api";
function CoursePage() {
  const { courseId } = useParams();
  console.log(courseId);
  //   const navigate = useNavigate();
  const {
    data: course,
    isLoading,
    error,
  } = useGetCourseQuery(courseId as string);

  if (isLoading) {
    return <Spinner text={"Loading course Content ..."} />;
  }
  if (error) {
    return <div className="text-red-500 ">Something went wrong ...</div>;
  }

  const handlePayment = async () => {
    try {
      // Step 1: Create an order on the backend
      const { data } = await createRazorPayOrder(courseId as string);
      const { order } = data;
      console.log(order);

      // Step 2: Load Razorpay script dynamically (optional if not added in index.html)
      const script = document.createElement("script");
      script.src = "https://checkout.razorpay.com/v1/checkout.js";
      script.async = true;
      document.body.appendChild(script);

      script.onload = () => {
        const options = {
          key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Replace with your Razorpay key_id
          amount: order.amount,
          currency: order.currency,
          name: "Skillhub",
          description: "Test Transaction enter a dummy upi id and proceed.",
          order_id: order.id, // This is generated by the backend
          handler: async function (response: any) {
            // Handle payment success
            alert(
              `Payment Successful! Payment ID: ${response.razorpay_payment_id}`
            );

            // Optionally verify payment on the backend
            try {
              await axiosInstance.post(`/course/${courseId}/verify-payment`, {
                ...response,
                order_id: order.id,
              });
              alert("Payment verified successfully!");
            } catch (error) {
              console.error("Payment verification failed:", error);
            }
          },
          prefill: {
            name: "Sai Charan B M",
            email: "saicharanbm@gmail.com",
            contact: "6300011111",
          },
          theme: {
            color: "#3399cc",
          },
        };

        const rzp = new window.Razorpay(options);
        rzp.open();
      };
    } catch (error) {
      console.error("Error initiating payment:", error);
      alert("Something went wrong! Please try again.");
    }

    // Step 2: Open Razorpay Checkout
    // const options = {
    //   key: "YOUR_API_KEY_ID", // Replace with your Razorpay key_id
    //   amount: order.amount,
    //   currency: order.currency,
    //   name: "Your Company Name",
    //   description: "Test Transaction",
    //   order_id: order.id, // This is generated by the backend
    //   handler: function (response) {
    //     alert(`Payment ID: ${response.razorpay_payment_id}`);
    //     alert(`Order ID: ${response.razorpay_order_id}`);
    //     alert(`Signature: ${response.razorpay_signature}`);
    //   },
    //   prefill: {
    //     name: "John Doe",
    //     email: "johndoe@example.com",
    //     contact: "9876543210",
    //   },
    //   theme: {
    //     color: "#3399cc",
    //   },
    // };

    // const rzp = new window.Razorpay(options);
    // rzp.open();
  };

  // 1) header with title, description and price
  return (
    <div className="w-full min-h-[calc(100vh-4rem)]  py-4 flex">
      {course && (
        <div className="flex-1 bg-[#1C1C1E] pb-10 rounded-md overflow-hidden">
          <CourseHeader
            title={course.title}
            description={course.description}
            price={course.price}
            creatorName={course.creator.fullName}
            thumbnailUrl={course.thumbnailUrl}
          />
          <div className="p-4 w-full flex justify-end ">
            <button
              onClick={handlePayment}
              className="bg-gradient-to-r from-gray-700 to-[#F89A28] px-5 py-3 text-white font-bold rounded-md hover:from-[#F89A28] hover:to-gray-700 flex items-center gap-2 text-base transition-transform transform hover:scale-105 duration-300"
            >
              <MdOutlineAddCircleOutline size={20} />
              Buy Course
            </button>
          </div>
          {course.sections.length > 0 ? (
            course.sections.map(
              (section: { id: string; title: string; contents: [] }) => {
                return (
                  <SectionDropDown
                    key={section.id}
                    thumbnailUrl={course.thumbnailUrl}
                    {...section}
                  />
                );
              }
            )
          ) : (
            <div className="text-red-500 text-center">
              <p className="text-lg md:text-2xl">
                No sections found for this course
              </p>
              <p className="text-sm">
                Please wait for the creator to add sections
              </p>
            </div>
          )}
          {/* {course} */}
        </div>
      )}
    </div>
  );
}

export default CoursePage;
