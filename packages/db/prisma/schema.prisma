// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  password String
  avatarUrl String
  fullName String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  purchasedCourses UserCourses[]
}
model Admin{
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  avatarUrl     String
  fullName      String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  courses       Course[]
}
model Course{
  id             String   @id @default(cuid())
  title          String
  description    String
  price          Int
  thumbnailUrl   String
  creatorId      String
  creator        Admin     @relation(fields: [creatorId],references: [id])
  purchasedUsers UserCourses[]
  sections       Section[]
  @@unique([title,creatorId])

}

model Section{
  id           String       @id @default(cuid())
  title        String
  courseId     String
  course       Course       @relation(fields: [courseId],references: [id])
  contents     Content[] 
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  @@unique([title,courseId])
}

model Content{
  id           String       @id @default(cuid())
  title        String 
  url          String
  thumbnailUrl String
  description  String?
  sectionId    String
  section      Section      @relation(fields: [sectionId],references: [id])
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  @@unique([title,sectionId])
}

model UserCourses{
  userId       String
  courseId     String
  paymentId    String        @unique
  razorpayOrderId    String        @unique
  amount       Int
  status       PaymentStatus @default(PENDING)
  user         User          @relation(fields: [userId], references: [id])
  course       Course        @relation(fields: [courseId],references: [id])
  createdAt DateTime @default(now())
  enrolledAt   DateTime      @updatedAt
  @@id([userId,courseId])
}

enum PaymentStatus{
  PENDING
  COMPLETED
  FAILED
}
